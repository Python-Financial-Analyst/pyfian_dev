pyfian.yield_curves.credit_spread
=================================

.. py:module:: pyfian.yield_curves.credit_spread

.. autoapi-nested-parse::

   credit_spread.py

   Module for credit spread curve models. Implements:

   - CreditSpreadCurveBase: Abstract base class for credit spread curves.
   - CreditSpreadCurve: Bootstraps credit spreads from bonds and a benchmark curve.
   - FlatCreditSpreadCurve: Flat (constant) credit spread curve.

   Each class provides a different convention for representing credit spread curves, useful for pricing, discounting, and risk management in fixed income analytics.



Attributes
----------

.. autoapisummary::

   pyfian.yield_curves.credit_spread.list_maturities_rates


Classes
-------

.. autoapisummary::

   pyfian.yield_curves.credit_spread.CreditSpreadCurveBase
   pyfian.yield_curves.credit_spread.CreditSpreadCurve
   pyfian.yield_curves.credit_spread.FlatCreditSpreadCurve


Module Contents
---------------

.. py:class:: CreditSpreadCurveBase

   Bases: :py:obj:`pyfian.visualization.mixins.YieldCurvePlotMixin`, :py:obj:`pyfian.yield_curves.base_curve.CurveBase`


   Abstract base class for all curves.

   :param curve_date: Date of the curve.
   :type curve_date: pd.Timestamp
   :param day_count_convention: Day count convention used for time calculations.
   :type day_count_convention: DayCountBase

   .. attribute:: curve_date

      Date of the curve.

      :type: pd.Timestamp

   .. attribute:: day_count_convention

      Day count convention used for time calculations.

      :type: DayCountBase

   .. method:: _get_t(t, spread=0)

      Get the rate for a cash flow by time t (in years).

   .. method:: to_dataframe(maturities=None)

      Export curve data to a pandas DataFrame.

   .. method:: as_dict()

      Return curve parameters and metadata as a dictionary.

   .. method:: from_dict(data)

      Instantiate a curve from a dictionary.

   .. method:: clone_with_new_date(new_date)

      Clone the curve with a new date.



   .. py:attribute:: yield_calculation_convention
      :type:  str


   .. py:attribute:: curve_date
      :type:  pandas.Timestamp

      CreditSpreadCurveBase is an abstract base class for credit spread curves.

      :param yield_calculation_convention: Yield calculation convention to use for rate conversions.
      :type yield_calculation_convention: str
      :param curve_date: Date of the curve.
      :type curve_date: pd.Timestamp

      .. attribute:: yield_calculation_convention

         Yield calculation convention used for rate conversions.

         :type: str

      .. attribute:: curve_date

         Date of the curve.

         :type: pd.Timestamp

      .. method:: date_spread(date, spread=0)

         Get the spread for a given date.

      .. method:: get_t(t, spread=0)

         Get the spread for a given maturity.

      .. method:: plot_curve(t_max=30, n=100, kind="spread", show=True, \*\*kwargs)

         Plot the yield curve.


   .. py:method:: date_spread(date: Union[str, pandas.Timestamp], spread: float = 0) -> float
      :abstractmethod:


      Get the spread for a given date.



   .. py:method:: get_t(t: float, spread: float = 0) -> float
      :abstractmethod:


      Get the spread for a given maturity.



   .. py:method:: plot_curve(t_max=30, n=100, kind='spread', show=True, **kwargs)

      Plot the yield curve.

      :param t_max: Maximum time horizon in years.
      :type t_max: float
      :param n: Number of points.
      :type n: int
      :param kind: "rate" to plot rates, "discount" to plot discount factors, "spread" to plot spreads.
      :type kind: str
      :param kwargs: Additional arguments passed to plt.plot.
      :type kwargs: dict



.. py:class:: CreditSpreadCurve(curve_date: Union[str, pandas.Timestamp], benchmark_curve: Optional[pyfian.yield_curves.base_curve.YieldCurveBase] = None, bonds: Optional[list[pyfian.fixed_income.fixed_rate_bond.FixedRateBullet] | tuple[pyfian.fixed_income.fixed_rate_bond.FixedRateBullet]] = None, spreads: Optional[dict[float, float]] = None, day_count_convention: Optional[str | pyfian.utils.day_count.DayCountBase] = 'actual/365', yield_calculation_convention: Optional[str] = None)

   Bases: :py:obj:`CreditSpreadCurveBase`


   CreditSpreadCurve represents a curve of credit spreads (in decimals) at different maturities.

   :param curve_date: Date of the curve.
   :type curve_date: str or datetime-like
   :param benchmark_curve: The benchmark yield curve to compare against (e.g., risk-free curve).
   :type benchmark_curve: YieldCurveBase, optional
   :param bonds: List or tuple of FixedRateBullet bond objects to bootstrap the spread curve from.
   :type bonds: list[FixedRateBullet] or tuple[FixedRateBullet], optional
   :param spreads: Dictionary mapping maturities (in years) to credit spreads (as decimals).
   :type spreads: dict[float, float], optional
   :param day_count_convention: Day count convention to use (default is "actual/365").
   :type day_count_convention: str or DayCountBase, optional
   :param yield_calculation_convention: Yield calculation convention to use (default is "Annual"). Supported: "Annual", "BEY", "Continuous".
   :type yield_calculation_convention: str, optional

   .. attribute:: spreads

      Dictionary of credit spreads by maturity (in years).

      :type: dict[float, float]

   .. attribute:: curve_date

      Date of the curve.

      :type: pd.Timestamp

   .. attribute:: bonds

      List of bonds used for bootstrapping, if provided.

      :type: list[FixedRateBullet] or None

   .. attribute:: benchmark_curve

      Benchmark yield curve.

      :type: YieldCurveBase or None

   .. attribute:: day_count_convention

      Day count convention used for time calculations.

      :type: DayCountBase

   .. attribute:: yield_calculation_convention

      Yield calculation convention used for rate conversions.

      :type: str

   .. method:: as_dict()

      Convert the curve to a dictionary.

   .. method:: get_t(t, spread=0)

      Get the spread for a given maturity (in years), optionally adding a spread.

   .. method:: date_spread(date, spread=0)

      Get the spread for a given date, optionally adding a spread.

   .. method:: spread_from_bonds(benchmark_curve, bonds)

      Class method to derive the spread curve from bond data and a benchmark curve.


   .. rubric:: Example

   >>> import pandas as pd
   >>> from pyfian.yield_curves.flat_curve import FlatCurveBEY
   >>> from pyfian.fixed_income.fixed_rate_bond import FixedRateBullet
   >>> # Par rates for different periods
   >>> list_maturities_rates = [
   ...     (pd.DateOffset(months=1), 4.49),
   ...     (pd.DateOffset(months=3), 4.32),
   ...     (pd.DateOffset(months=6), 4.14),
   ...     (pd.DateOffset(years=1), 3.95),
   ...     (pd.DateOffset(years=2), 3.79),
   ...     (pd.DateOffset(years=3), 3.75),
   ...     (pd.DateOffset(years=5), 3.86),
   ...     (pd.DateOffset(years=7), 4.07),
   ...     (pd.DateOffset(years=10), 4.33),
   ...     (pd.DateOffset(years=20), 4.89),
   ...     (pd.DateOffset(years=30), 4.92),
   ... ]
   >>> date = pd.Timestamp("2025-08-22")
   >>> one_year_offset = date + pd.DateOffset(years=1)
   >>> bonds = []
   >>> for offset, cpn in list_maturities_rates:
   ...     not_zero_coupon = date + offset > one_year_offset
   ...     bond = FixedRateBullet(
   ...         issue_dt=date,
   ...         maturity=date + offset,
   ...         cpn_freq=2 if not_zero_coupon else 0,
   ...         cpn=cpn if not_zero_coupon else 0,
   ...         bond_price=100 if not_zero_coupon else None,
   ...         yield_to_maturity=None if not_zero_coupon else cpn / 100,
   ...         settlement_date=date,
   ...     )
   ...     bonds.append(bond)
   >>> benchmark_curve = FlatCurveBEY(bey=0.02, curve_date=date)
   >>> spread_curve = CreditSpreadCurve(curve_date=date, benchmark_curve=benchmark_curve, bonds=bonds, day_count_convention="30/360", yield_calculation_convention="BEY")
   >>> spread_curve_2 = CreditSpreadCurve.spread_from_bonds(benchmark_curve=benchmark_curve, bonds=bonds)
   >>> # Access spread for a given maturity
   >>> spread_curve.get_t(0.5) # doctest: +SKIP
   0.0214


   .. py:attribute:: bonds


   .. py:attribute:: benchmark_curve
      :value: None



   .. py:attribute:: curve_date
      :value: None


      CreditSpreadCurveBase is an abstract base class for credit spread curves.

      :param yield_calculation_convention: Yield calculation convention to use for rate conversions.
      :type yield_calculation_convention: str
      :param curve_date: Date of the curve.
      :type curve_date: pd.Timestamp

      .. attribute:: yield_calculation_convention

         Yield calculation convention used for rate conversions.

         :type: str

      .. attribute:: curve_date

         Date of the curve.

         :type: pd.Timestamp

      .. method:: date_spread(date, spread=0)

         Get the spread for a given date.

      .. method:: get_t(t, spread=0)

         Get the spread for a given maturity.

      .. method:: plot_curve(t_max=30, n=100, kind="spread", show=True, \*\*kwargs)

         Plot the yield curve.


   .. py:attribute:: day_count_convention
      :type:  pyfian.utils.day_count.DayCountBase


   .. py:attribute:: yield_calculation_convention
      :type:  str
      :value: 'Annual'



   .. py:attribute:: maturities
      :value: []



   .. py:method:: as_dict()

      Convert the curve to a dictionary.



   .. py:method:: _prepare_spreads(spreads)

      Prepare spreads for the curve sorted by time and with time fractions.



   .. py:method:: get_rate(t: float, yield_calculation_convention: Optional[str] = None, spread: float = 0) -> float

      Get the rate for a cash flow by time t (in years) if there is a benchmark curve.

      Returns the rate for the cash flow including the spread curve.

      If a spread is input, the spread is added to the yield in the original curve.

      yield_calculation_convention can be used to transform the yield to different conventions.

      :param t: Time in years to discount.
      :type t: float
      :param spread: Spread to add to the discount rate.
      :type spread: float
      :param yield_calculation_convention: Yield calculation convention to use (default is None).
      :type yield_calculation_convention: Optional[str]

      :returns: Rate for the cash flow.
      :rtype: float



   .. py:method:: date_rate(date: Union[str, pandas.Timestamp], yield_calculation_convention: Optional[str] = None, spread: float = 0) -> float

      Get the rate for a cash flow by time t (in years) if there is a benchmark curve.

      Returns the rate for the cash flow including the spread curve.

      If a spread is input, the spread is added to the yield in the original curve.

      yield_calculation_convention can be used to transform the yield to different conventions.

      :param date: Date to get the rate for.
      :type date: Union[str, pd.Timestamp]
      :param yield_calculation_convention: Yield calculation convention to use (default is None).
      :type yield_calculation_convention: Optional[str]
      :param spread: Spread to add to the rate.
      :type spread: float

      :returns: Rate for the cash flow.
      :rtype: float



   .. py:method:: get_spread(t: float, spread: float = 0) -> float

      Get the spread for a cash flow by time t (in years).

      The spread is added to the yield in the original curve.

      :param t: Time in years to discount.
      :type t: float
      :param spread: Spread to add to the discount rate.
      :type spread: float

      :returns: Rate for the cash flow.
      :rtype: float



   .. py:method:: date_spread(date: Union[str, pandas.Timestamp], spread: float = 0) -> float

      Get the spread for a given date.



   .. py:method:: get_t(t, spread=0)

      Get the spread for a given maturity.



   .. py:method:: _get_t(t: float, spread: float = 0) -> float

      Get the rate for a cash flow by time t (in years).

      The spread is added to the yield in the original curve.

      :param t: Time in years to discount.
      :type t: float
      :param spread: Spread to add to the discount rate.
      :type spread: float

      :returns: Rate for the cash flow.
      :rtype: float



   .. py:method:: spread_from_bonds(benchmark_curve: pyfian.yield_curves.base_curve.YieldCurveBase, bonds: list[pyfian.fixed_income.fixed_rate_bond.FixedRateBullet] | tuple[pyfian.fixed_income.fixed_rate_bond.FixedRateBullet])
      :classmethod:



   .. py:method:: _bootstrap_spreads()


   .. py:method:: _get_optimal_spread(next_date, non_valued_payments)


   .. py:method:: __repr__()


.. py:class:: FlatCreditSpreadCurve(spread: float, curve_date: Union[str, pandas.Timestamp], yield_calculation_convention: Optional[str] = None)

   Bases: :py:obj:`CreditSpreadCurveBase`


   FlatCreditSpreadCurve represents a flat (constant) credit spread curve.

   :param spread: Credit spread (as decimal, e.g. 0.01 for 100bps).
   :type spread: float
   :param curve_date: The curve settlement date.
   :type curve_date: str or datetime-like
   :param yield_calculation_convention: Yield calculation convention to use (default is "Annual"). Supported: "Annual", "BEY", "Continuous".
   :type yield_calculation_convention: str, optional

   .. attribute:: spread

      The constant credit spread.

      :type: float

   .. attribute:: curve_date

      Date of the curve.

      :type: pd.Timestamp

   .. attribute:: yield_calculation_convention

      Yield calculation convention used for rate conversions.

      :type: str

   .. method:: as_dict()

      Convert the curve to a dictionary.

   .. method:: __call__(t, spread=0)

      Get the spread for a given maturity (always returns the constant spread).

   .. method:: date_spread(date, spread=0)

      Get the spread for a given date (always returns the constant spread).



   .. py:attribute:: spread
      :type:  float


   .. py:attribute:: curve_date
      :type:  pandas.Timestamp
      :value: None


      CreditSpreadCurveBase is an abstract base class for credit spread curves.

      :param yield_calculation_convention: Yield calculation convention to use for rate conversions.
      :type yield_calculation_convention: str
      :param curve_date: Date of the curve.
      :type curve_date: pd.Timestamp

      .. attribute:: yield_calculation_convention

         Yield calculation convention used for rate conversions.

         :type: str

      .. attribute:: curve_date

         Date of the curve.

         :type: pd.Timestamp

      .. method:: date_spread(date, spread=0)

         Get the spread for a given date.

      .. method:: get_t(t, spread=0)

         Get the spread for a given maturity.

      .. method:: plot_curve(t_max=30, n=100, kind="spread", show=True, \*\*kwargs)

         Plot the yield curve.


   .. py:attribute:: yield_calculation_convention
      :type:  str
      :value: 'Annual'



   .. py:method:: as_dict() -> dict

      Convert the curve to a dictionary.



   .. py:method:: get_t(t: float, spread: float = 0) -> float

      Get the spread for a given maturity.

      :param t: The maturity (in years).
      :type t: float
      :param spread: An additional spread to add (default is 0).
      :type spread: float, optional

      :returns: The spread for the given maturity.
      :rtype: float



   .. py:method:: _get_t(t: float, spread: float = 0) -> float

      Get the rate for a cash flow by time t (in years).

      The spread is added to the yield in the original curve.

      :param t: Time in years to discount.
      :type t: float
      :param spread: Spread to add to the discount rate.
      :type spread: float

      :returns: Rate for the cash flow.
      :rtype: float



   .. py:method:: date_spread(date: Union[str, pandas.Timestamp], spread: float = 0) -> float

      Get the spread for a given date.

      :param date: The date to get the spread for.
      :type date: Union[str, pd.Timestamp]
      :param spread: An additional spread to add (default is 0).
      :type spread: float, optional

      :returns: The spread for the given date.
      :rtype: float



   .. py:method:: __repr__() -> str


   .. py:method:: get_spread(t: float, spread: float = 0) -> float

      Get the spread for a cash flow by time t (in years).

      The spread is added to the yield in the original curve.

      :param t: Time in years to discount.
      :type t: float
      :param spread: Spread to add to the discount rate.
      :type spread: float

      :returns: Rate for the cash flow.
      :rtype: float



.. py:data:: list_maturities_rates

