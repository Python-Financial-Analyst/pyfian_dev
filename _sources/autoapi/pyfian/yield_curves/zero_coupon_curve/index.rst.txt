pyfian.yield_curves.zero_coupon_curve
=====================================

.. py:module:: pyfian.yield_curves.zero_coupon_curve

.. autoapi-nested-parse::

   zero_coupon_curve.py

   Module for zero-coupon yield curve models. Implements:

   - ZeroCouponCurve: Yield curve for zero-coupon rates at different maturities.
   - ZeroCouponCurveByDate: Yield curve for zero-coupon rates indexed by date.

   Each class provides a different convention for representing zero-coupon yield curves, useful for pricing, discounting, and rate conversions in fixed income analytics.



Classes
-------

.. autoapisummary::

   pyfian.yield_curves.zero_coupon_curve.ZeroCouponCurve
   pyfian.yield_curves.zero_coupon_curve.ZeroCouponCurveByDate


Module Contents
---------------

.. py:class:: ZeroCouponCurve(zero_rates: dict[float, float], curve_date: Union[str, pandas.Timestamp], day_count_convention: Optional[str | pyfian.utils.day_count.DayCountBase] = 'actual/365', yield_calculation_convention: Optional[str] = None)

   Bases: :py:obj:`pyfian.visualization.mixins.YieldCurvePlotMixin`, :py:obj:`pyfian.yield_curves.base_curve.YieldCurveBase`


   ZeroCouponCurve represents a yield curve for zero-coupon rates at different maturities.

   :param zero_rates: Dictionary mapping maturities (in years) to zero-coupon rates (as decimals).
   :type zero_rates: dict
   :param curve_date: Date of the curve.
   :type curve_date: str or datetime-like
   :param day_count_convention: Day count convention to use (default is None). If None, "actual/365" will be used.
   :type day_count_convention: str or DayCountBase, optional
   :param yield_calculation_convention: Yield calculation convention to use (default is None).
                                        Supported conventions: "Annual", "BEY", "Continuous". If None, "Annual" will be used.
   :type yield_calculation_convention: str, optional

   .. attribute:: zero_rates

      Dictionary of zero-coupon rates keyed by maturity (in years).

      :type: dict

   .. attribute:: curve_date

      Date of the curve.

      :type: pd.Timestamp

   .. attribute:: day_count_convention

      Day count convention used for calculations.

      :type: DayCountBase

   .. attribute:: yield_calculation_convention

      Yield calculation convention used for rate conversions.

      :type: str

   .. attribute:: maturities

      List of maturities (in years) for which zero-coupon rates are available.

      :type: list of float

   .. method:: as_dict()

      Convert the curve to a dictionary.

   .. method:: discount_t(t, spread=0)

      Discount a cash flow by time t (in years).

   .. method:: discount_to_rate(discount_factor, t, spread, yield_calculation_convention=None)

      Convert a discount factor for a period t to a rate.

   .. method:: discount_date(date, spread=0)

      Discount a cash flow to a specific date.

   .. method:: get_rate(t, yield_calculation_convention=None, spread=0)

      Get the rate for a cash flow by time t (in years).

   .. method:: date_rate(date, yield_calculation_convention=None, spread=0)

      Get the rate for a cash flow by date.

   .. method:: get_t(t, spread=0)

      Get the interpolated zero-coupon rate for time t (in years).


   .. rubric:: Example

   .. code-block:: python

       import pandas as pd
       from pyfian.yield_curves.zero_coupon_curve import ZeroCouponCurve

       zero_rates = {
           1: 0.04,   # 1 year maturity, 4% rate
           2: 0.042,  # 2 year maturity, 4.2% rate
           5: 0.045,  # 5 year maturity, 4.5% rate
       }
       curve_date = "2025-08-22"
       curve = ZeroCouponCurve(zero_rates=zero_rates, curve_date=curve_date)
       # Get discount factor for 2 years
       df = curve.discount_t(2)
       # Get rate for 2 years
       rate = curve.get_rate(2)
       print(f"Discount factor for 2 years: {df}")
       print(f"Zero-coupon rate for 2 years: {rate}")


   .. py:attribute:: curve_date
      :value: None



   .. py:attribute:: day_count_convention
      :type:  pyfian.utils.day_count.DayCountBase


   .. py:attribute:: yield_calculation_convention
      :type:  str
      :value: 'Annual'



   .. py:attribute:: zero_rates


   .. py:attribute:: maturities


   .. py:method:: as_dict()

      Convert the curve to a dictionary.



   .. py:method:: _prepare_zero_rates(zero_rates)

      Prepare zero rates for the curve sorted by time and with time fractions.



   .. py:method:: discount_t(t: float, spread: float = 0) -> float

      Discount a cash flow by time t (in years).

      The formula used is:

      .. math:: PV = \frac{1}{(1 + r)^{t}}

      where:

      - :math:`PV` is the present value
      - :math:`r` is the annual effective rate (AER) for the period
      - :math:`t` is the time in years

      :param t: Time in years to discount.
      :type t: float
      :param spread: Spread to add to the discount rate.
      :type spread: float

      :returns: Present value of the cash flow.
      :rtype: float



   .. py:method:: discount_to_rate(discount_factor: float, t: float, spread: float, yield_calculation_convention: Optional[str] = None) -> float

      Convert a discount factor for a period t to a rate.

      The formula used is:

      .. math::

          r = (\frac{1}{D(t)})^{\frac{1}{t}} - 1 - s

      where:
      - D(t) is the discount factor at time t
      - r is the Bond Equivalent Yield (BEY) for the period
      - s is the spread

      :param discount_factor: Discount factor.
      :type discount_factor: float
      :param t: Time in years.
      :type t: float
      :param spread: Spread to subtract from the yield to get a Risk Free rate. Defaults to 0.
      :type spread: float, optional

      :returns: Annual effective rate (AER).
      :rtype: float



   .. py:method:: discount_date(date: Union[str, pandas.Timestamp], spread: float = 0) -> float

      Discount a cash flow to a specific date.

      The spread is added to the yield in the original curve.

      :param date: Date to discount to.
      :type date: Union[str, pd.Timestamp]
      :param spread: Spread to add to the discount rate.
      :type spread: float

      :returns: Present value of the cash flow.
      :rtype: float



   .. py:method:: get_rate(t: float, yield_calculation_convention: Optional[str] = None, spread: float = 0) -> float

      Get the rate for a cash flow by time t (in years).

      The spread is added to the yield in the original curve.

      yield_calculation_convention can be used to transform the yield to different conventions.

      :param t: Time in years to discount.
      :type t: float
      :param spread: Spread to add to the discount rate.
      :type spread: float
      :param yield_calculation_convention: Yield calculation convention to use (default is None).
      :type yield_calculation_convention: Optional[str]

      :returns: Rate for the cash flow.
      :rtype: float



   .. py:method:: date_rate(date: Union[str, pandas.Timestamp], yield_calculation_convention: Optional[str] = None, spread: float = 0) -> float

      Get the rate for a cash flow by date.

      The spread is added to the yield in the original curve.

      yield_calculation_convention can be used to transform the yield to different conventions.

      :param date: Date to get the rate for.
      :type date: Union[str, pd.Timestamp]
      :param yield_calculation_convention: Yield calculation convention to use (default is None).
      :type yield_calculation_convention: Optional[str]
      :param spread: Spread to add to the rate.
      :type spread: float

      :returns: Rate for the cash flow.
      :rtype: float



   .. py:method:: get_t(t: float, spread: float = 0) -> float


   .. py:method:: _get_t(t: float, spread: float = 0) -> float

      Get the rate for a cash flow by time t (in years).

      The spread is added to the yield in the original curve.

      :param t: Time in years to discount.
      :type t: float
      :param spread: Spread to add to the discount rate.
      :type spread: float

      :returns: Rate for the cash flow.
      :rtype: float



   .. py:method:: __repr__()


.. py:class:: ZeroCouponCurveByDate(zero_rates_dates: dict[pandas.Timestamp | str, float], curve_date: Union[str, pandas.Timestamp], day_count_convention: Optional[str | pyfian.utils.day_count.DayCountBase] = None, yield_calculation_convention: Optional[str] = None)

   Bases: :py:obj:`ZeroCouponCurve`


   ZeroCouponCurveByDate is a subclass of ZeroCouponCurve that allows for the input of zero rates as a function of dates.

   :param zero_rates_dates: Dictionary with dates as keys and zero rates as values.
   :type zero_rates_dates: dict[pd.Timestamp | str, float]
   :param curve_date: The curve settlement date.
   :type curve_date: Union[str, pd.Timestamp]
   :param day_count_convention: Day count convention to use (default is None). If None, "actual/365" will be used.
   :type day_count_convention: str or DayCountBase, optional
   :param yield_calculation_convention: Yield calculation convention to use (default is None).
                                        Supported conventions: "Annual", "BEY", "Continuous". If None, "Annual" will be used.
   :type yield_calculation_convention: str, optional


   .. py:attribute:: curve_date
      :value: None



   .. py:attribute:: yield_calculation_convention
      :type:  str
      :value: 'Annual'



   .. py:attribute:: day_count_convention
      :type:  pyfian.utils.day_count.DayCountBase


   .. py:attribute:: zero_rates_dates


   .. py:attribute:: zero_rates


   .. py:method:: as_dict()

      Convert the curve to a dictionary.



   .. py:method:: _prepare_zero_rates(zero_rates_date: dict[pandas.Timestamp, float])

      Prepare zero rates for the curve sorted by time and with time fractions.



