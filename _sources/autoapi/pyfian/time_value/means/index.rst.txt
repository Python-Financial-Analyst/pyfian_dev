pyfian.time_value.means
=======================

.. py:module:: pyfian.time_value.means


Functions
---------

.. autoapisummary::

   pyfian.time_value.means.geometric_mean
   pyfian.time_value.means.arithmetic_mean
   pyfian.time_value.means.harmonic_mean


Module Contents
---------------

.. py:function:: geometric_mean(returns, axis=0)

   Calculate the geometric mean of percent returns.

   The geometric mean is useful for evaluating investment returns over time
   because it accounts for compounding. This function accepts percent returns
   (e.g., 0.05 for +5%), handles NaNs, and works with NumPy arrays and pandas
   Series/DataFrames.

   :param returns: Input percent returns. For example, a 5% return should be passed as 0.05.
   :type returns: array-like, pandas.Series, or pandas.DataFrame
   :param axis: Axis along which the geometric mean is computed. Default is 0.
                Ignored for 1D inputs (Series or 1D arrays).
   :type axis: int, optional

   :returns: Geometric mean of the percent returns. Returns a float for 1D input and
             a Series for DataFrames.
   :rtype: float or pandas.Series

   :raises ValueError: If any values less than or equal to -1.0 are present (which would make
       1 + return â‰¤ 0 and thus undefined in log space).

   .. rubric:: Examples

   >>> import numpy as np
   >>> geometric_mean([0.05, 0.10, -0.02])
   0.0416...

   >>> import pandas as pd
   >>> df = pd.DataFrame({
   ...     'Fund A': [0.05, 0.02, np.nan],
   ...     'Fund B': [0.01, -0.03, 0.04]
   ... })
   >>> geometric_mean(df)
   Fund A    0.0343...
   Fund B    0.0059...
   dtype: float64

   .. rubric:: Notes

   This function assumes returns are in decimal form (e.g., 0.10 = 10%).
   NaN values are ignored.


.. py:function:: arithmetic_mean(returns, axis=0)

   Calculate the arithmetic mean of percent returns.

   The arithmetic mean is a simple average of returns, useful for understanding
   the average return over a period without considering compounding effects.
   This function accepts percent returns (e.g., 0.05 for +5%), handles NaNs,
   and works with NumPy arrays and pandas Series/DataFrames.

   :param returns: Input percent returns. For example, a 5% return should be passed as 0.05.
   :type returns: array-like, pandas.Series, or pandas.DataFrame
   :param axis: Axis along which the arithmetic mean is computed. Default is 0.
                Ignored for 1D inputs (Series or 1D arrays).
   :type axis: int, optional

   :returns: Arithmetic mean of the percent returns. Returns a float for 1D input and
             a Series for DataFrames.
   :rtype: float or pandas.Series

   .. rubric:: Examples

   >>> import numpy as np
   >>> arithmetic_mean([0.05, 0.10, -0.02])
   0.0433...

   >>> import pandas as pd
   >>> df = pd.DataFrame({
   ...     'Fund A': [0.05, 0.02, np.nan],
   ...     'Fund B': [0.01, -0.03, 0.04]
   ... })
   >>> arithmetic_mean(df)
   Fund A    0.0350...
   Fund B   -0.0033...
   dtype: float64

   .. rubric:: Notes

   This function assumes returns are in decimal form (e.g., 0.10 = 10%).
   NaN values are ignored.


.. py:function:: harmonic_mean(returns, axis=0)

   Calculate the harmonic mean of percent returns.

   The harmonic mean is the reciprocal of the arithmetic mean of the reciprocals.
   It is useful for averaging ratios or rates and is less sensitive to large outliers.
   This function accepts percent returns (e.g., 0.05 for +5%), handles NaNs,
   and works with NumPy arrays and pandas Series/DataFrames.

   :param returns: Input percent returns. For example, a 5% return should be passed as 0.05.
   :type returns: array-like, pandas.Series, or pandas.DataFrame
   :param axis: Axis along which the harmonic mean is computed. Default is 0.
                Ignored for 1D inputs (Series or 1D arrays).
   :type axis: int, optional

   :returns: Harmonic mean of the percent returns. Returns a float for 1D input and
             a Series for DataFrames.
   :rtype: float or pandas.Series

   .. rubric:: Examples

   >>> harmonic_mean([0.05, 0.10, 0.02])
   0.0491...

   >>> df = pd.DataFrame({
   ...     'Fund A': [0.05, 0.02, np.nan],
   ...     'Fund B': [0.01, 0.03, 0.04]
   ... })
   >>> harmonic_mean(df)
   Fund A    0.0290...
   Fund B    0.0222...
   dtype: float64

   .. rubric:: Notes

   This function assumes returns are in decimal form (e.g., 0.10 = 10%).
   NaN values are ignored. Returns less than or equal to zero will raise a warning
   or error since harmonic mean requires positive values.


