pyfian.time_value.present_value
===============================

.. py:module:: pyfian.time_value.present_value


Functions
---------

.. autoapisummary::

   pyfian.time_value.present_value.present_value_annuity
   pyfian.time_value.present_value.present_value_annuity_annual
   pyfian.time_value.present_value.present_value_growing_annuity
   pyfian.time_value.present_value.present_value_growing_perpetuity
   pyfian.time_value.present_value.present_value_two_stage_annuity
   pyfian.time_value.present_value.present_value_two_stage_annuity_perpetuity


Module Contents
---------------

.. py:function:: present_value_annuity(payment: float, rate: float, periods: int) -> float

   Calculate the present value of a fixed annuity.

   The present value of a fixed annuity is given by:

   .. math::
       PV = P \times \frac{1 - (1 + r)^{-n}}{r}

   where:
       - :math:`PV` is the present value
       - :math:`P` is the payment per period
       - :math:`r` is the interest rate per period
       - :math:`n` is the total number of periods

   :param payment: The fixed payment amount per period.
   :type payment: float
   :param rate: The interest rate per period (as a decimal).
   :type rate: float
   :param periods: The total number of periods.
   :type periods: int

   :returns: Present value of the fixed annuity.
   :rtype: float

   .. rubric:: Examples

   >>> present_value_annuity(100, 0.05, 10)
   772.1734929184818


.. py:function:: present_value_annuity_annual(payment: float, annual_rate: float, years: int, payments_per_year: int) -> float

   Calculate the present value of a fixed annuity with an annual interest rate
   and a specified number of payments per year.

   The present value is calculated as:



   .. math::
       PV = P \times \frac{1 - (1 + r)^{-N}}{r}

   where:
       - :math:`P` is the payment per period
       - :math:`r` is the periodic interest rate (annual_rate / payments_per_year)
       - :math:`N` is the total number of periods,
       with :math:`N = \text{years} \times \text{payments_per_year}`

   This function adjusts the interest rate and number of periods
   for non-annual payment frequencies.

   :param payment: The fixed payment amount per period.
   :type payment: float
   :param annual_rate: The annual interest rate (as a decimal).
   :type annual_rate: float
   :param years: The total number of years.
   :type years: int
   :param payments_per_year: The number of payments per year.
   :type payments_per_year: int

   :returns: Present value of the fixed annuity.
   :rtype: float

   .. rubric:: Examples

   >>> present_value_annuity_annual(100, 0.05, 10, 12)
   9428.135032823473


.. py:function:: present_value_growing_annuity(payment: float, rate: float, periods: int, growth: float = 0.0) -> float

   Calculate the present value of a growing annuity.

   The present value is calculated as:


   .. math::
       PV = P \times \frac{1 - \left(\frac{1 + r}{1 + g}\right)^{-n}}
       {\left(\frac{1 + r}{1 + g}\right) - 1}

   where:
       - :math:`P` is the payment at time t=0
       - :math:`r` is the interest rate per period
       - :math:`g` is the growth rate per period
       - :math:`n` is the total number of periods

   .. note::

      The `payment` parameter corresponds to the payment at time t=0.
      Growth is applied in the first period as well, so the payment at time t=k is:
          payment * (1 + growth)^(k+1)
      for each period k.

   :param payment: The initial payment amount per period.
   :type payment: float
   :param rate: The interest rate per period (as a decimal).
   :type rate: float
   :param periods: The total number of periods.
   :type periods: int
   :param growth: The growth rate of the payments (as a decimal). Defaults to 0.0.
   :type growth: float, optional

   :returns: Present value of the growing annuity.
   :rtype: float

   .. rubric:: Examples

   >>> present_value_growing_annuity(100, 0.05, 10, 0.02 )
   855.5867765481578
   >>> present_value_growing_annuity(100, 0.05, 10, 0.05)
   1000.0


.. py:function:: present_value_growing_perpetuity(payment: float, rate: float, growth: float) -> float

   Calculate the present value of a growing perpetuity (infinite growing annuity).

   The present value of a growing perpetuity is given by:

   .. math::
       PV = \frac{P \times (1+g)}{r - g}

   where:
       - :math:`PV` is the present value
       - :math:`P` is the payment per period
       - :math:`r` is the interest rate per period
       - :math:`g` is the growth rate per period

   .. note::

      The `payment` parameter corresponds to the payment at time t=0.
      Growth is applied in the first period as well, so the payment at time t=k is:
          payment * (1 + growth)^(k+1)
      for each period k.

   :param payment: The initial payment amount per period.
   :type payment: float
   :param rate: The interest rate per period (as a decimal).
   :type rate: float
   :param growth: The growth rate of the payments (as a decimal).
   :type growth: float

   :returns: Present value of the growing perpetuity.
   :rtype: float

   :raises ValueError: If rate <= growth (would result in division by zero or negative present value).

   .. rubric:: Examples

   >>> present_value_growing_perpetuity(100, 0.05, 0.02)
   3400.0


.. py:function:: present_value_two_stage_annuity(payment: float, rate1: float, rate2: float, periods1: int, periods2: int) -> float

   Calculate the present value of a two-stage annuity.

   The present value is calculated as:
   .. math::
       PV = PV_{\text{stage1}} + PV_{\text{stage2}}
   where:
       - :math:`PV_{\text{stage1}}` is the present value of the first stage annuity
       - :math:`PV_{\text{stage2}}` is the present value of the second stage annuity
   The present value of the first stage is calculated using the `present_value_annuity`
   function, and the second stage is calculated using the `present_value_annuity`
   function, discounted back to the present using the interest rate of the first stage.

   .. note::

      The `payment` parameter corresponds to the payment at time t=0.
      Growth is applied in the first period as well, so the payment at time t=k is:
          payment * (1 + growth)^(k+1)
      for each period k.

   :param payment: The fixed payment amount per period.
   :type payment: float
   :param rate1: Interest rate for the first stage (as a decimal).
   :type rate1: float
   :param rate2: Interest rate for the second stage (as a decimal).
   :type rate2: float
   :param periods1: Number of periods in the first stage.
   :type periods1: int
   :param periods2: Number of periods in the second stage.
   :type periods2: int

   :returns: Present value of the two-stage annuity.
   :rtype: float

   .. rubric:: Examples

   >>> present_value_two_stage_annuity(100, 0.05, 0.06, 5, 5)
   762.9973919305694


.. py:function:: present_value_two_stage_annuity_perpetuity(payment: float, rate1: float, periods1: int, rate2: float, growth1: float = 0.0, growth2: float = 0.0) -> float

   Calculate the present value of a two-stage annuity where the first stage
   is a (possibly growing) annuity and the second stage is a (possibly growing) perpetuity.

   The present value is calculated as:

   .. math::
       PV = PV_{\text{stage1}} + PV_{\text{stage2}}
   where:
       - :math:`PV_{\text{stage1}}` is the present value of the first stage annuity
       - :math:`PV_{\text{stage2}}` is the present value of the second stage perpetuity.
   The present value of the first stage is calculated using the `present_value_growing_annuity`
   function, and the second stage is calculated using the `present_value_growing_perpetuity`
   function.
   The perpetuity is discounted back to the present using the interest rate of the first stage.

   .. note::

      The `payment` parameter corresponds to the payment at time t=0.
      Growth is applied in the first period as well, so the payment at time t=k is:
          payment * (1 + growth)^(k+1)
      for each period k.

   :param payment: The payment amount at time t=0.
   :type payment: float
   :param rate1: Interest rate for the first stage (as a decimal).
   :type rate1: float
   :param periods1: Number of periods in the first stage.
   :type periods1: int
   :param rate2: Interest rate for the second stage/perpetuity (as a decimal).
   :type rate2: float
   :param growth1: Growth rate for the first stage payments (as a decimal, default is 0 for level annuity).
   :type growth1: float, optional
   :param growth2: Growth rate for the perpetuity payments (as a decimal, default is 0 for level perpetuity).
   :type growth2: float, optional

   :returns: Present value of the two-stage annuity with perpetuity.
   :rtype: float

   :raises ValueError: If rate2 <= growth2 (would result in division by zero or negative present value).

   .. rubric:: Examples

   >>> present_value_two_stage_annuity_perpetuity(100, 0.05, 5, 0.06, 0.02, 0.01)
   2206.1948451002554


