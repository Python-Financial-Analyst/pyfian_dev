pyfian.time_value.irr
=====================

.. py:module:: pyfian.time_value.irr

.. autoapi-nested-parse::

   irr.py

   Module for computing the Internal Rate of Return (IRR) from a series of cash flows.



Functions
---------

.. autoapisummary::

   pyfian.time_value.irr.npv
   pyfian.time_value.irr.irr
   pyfian.time_value.irr.np_irr
   pyfian.time_value.irr.xirr_base
   pyfian.time_value.irr.xirr


Module Contents
---------------

.. py:function:: npv(rate: float, cash_flows: list[float]) -> float

   Compute the Net Present Value (NPV) for a series of cash flows.

   The NPV is calculated as the sum of the present values of each cash flow,
   discounted at the specified rate. The formula is:

   .. math::
       NPV = \sum_{t=0}^{n} \frac{CF_t}{(1 + r)^t}
   where:
       - :math:`NPV` is the net present value
       - :math:`CF_t` is the cash flow at time `t`
       - :math:`r` is the discount rate
       - :math:`n` is the total number of periods


   :param rate: Discount rate as a decimal (e.g., 0.1 for 10%).
   :type rate: float
   :param cash_flows: Cash flow values, where the index represents the time period.
   :type cash_flows: list of float

   :returns: Net present value of the cash flows.
   :rtype: float

   .. rubric:: Examples

   >>> npv(0.1, [-100, 50, 60])
   -4.95867768595


.. py:function:: irr(cash_flows: list[float], guess: float = 0.1, tol: float = 1e-06, max_iter: int = 1000) -> float

   Estimate the Internal Rate of Return (IRR) using the Newton-Raphson method.

   The IRR is the rate that makes the NPV of cash flows equal to zero. The formula is:

   .. math::
       0 = \sum_{t=0}^{n} \frac{CF_t}{(1 + IRR)^t}
   where:
       - :math:`IRR` is the internal rate of return
       - :math:`CF_t` is the cash flow at time `t`
       - :math:`n` is the total number of periods
   This function uses the Newton-Raphson method to find the IRR iteratively.
   Convergence is determined by the specified tolerance and maximum iterations.

   :param cash_flows: Cash flow values, where the index represents the time period.
   :type cash_flows: list of float
   :param guess: Initial guess for the IRR (default is 0.1, i.e. 10%).
   :type guess: float, optional
   :param tol: Tolerance for convergence (default is 1e-6).
   :type tol: float, optional
   :param max_iter: Maximum number of iterations (default is 1000).
   :type max_iter: int, optional

   :returns: Estimated internal rate of return as a decimal.
   :rtype: float

   :raises ValueError: If the IRR calculation does not converge.

   .. rubric:: Examples

   >>> irr([-1000, 300, 400, 500, 600])
   0.2488833566240709


.. py:function:: np_irr(cash_flows: list[float]) -> float

   Compute the Internal Rate of Return using numpy-financial's IRR function.

   This function is a wrapper around numpy-financial's `irr` function,
   which calculates the IRR for a series of cash flows. It is useful for quickly
   obtaining the IRR without manually implementing the calculation.

   Formula
   -------

   .. math::
       0 = \sum_{t=0}^{n} \frac{CF_t}{(1 + IRR)^t}
   where:
       - :math:`IRR` is the internal rate of return
       - :math:`CF_t` is the cash flow at time `t`
       - :math:`n` is the total number of periods
   This function uses numpy-financial's built-in IRR calculation, which is efficient
   and handles various edge cases.

   :param cash_flows: Cash flow values, where the index represents the time period.
   :type cash_flows: list of float

   :returns: Internal Rate of Return as a decimal.
   :rtype: float

   .. rubric:: Examples

   >>> np_irr([-1000, 300, 400, 500, 600])
   0.2488833566240709


.. py:function:: xirr_base(cash_flows: collections.abc.Sequence[float], dates: collections.abc.Sequence[datetime.datetime], guess: float = 0.1, tol: float = 1e-06, max_iter: int = 100) -> float

   Calculate the IRR (Yield) for non-periodic cash flows (XIRR).

   This function computes the IRR for a series of cash flows that occur at irregular intervals.
   It uses the Newton-Raphson method to find the rate that makes the NPV
   of the cash flows equal to zero.

   The formula is:

   .. math::
       0 = \sum_{i=0}^{n} \frac{CF_i}{(1 + IRR)^{\frac{d_i - d_0}{365}}}
   where:
       - :math:`IRR` is the internal rate of return
       - :math:`CF_i` is the cash flow at time `i`
       - :math:`d_i` is the date of cash flow `i`
       - :math:`d_0` is the date of the first cash flow
       - :math:`n` is the total number of cash flows
   This function adjusts the cash flows based on the number of days between each cash flow and
   the first cash flow date.

   :param cash_flows: Cash flow values, where each value corresponds to a date in `dates`.
   :type cash_flows: Sequence[float]
   :param dates: Dates of each cash flow. Must be the same length as `cash_flows`.
   :type dates: Sequence[datetime]
   :param guess: Initial guess for the IRR (default is 0.1, i.e. 10%).
   :type guess: float, optional
   :param tol: Tolerance for convergence (default is 1e-6).
   :type tol: float, optional
   :param max_iter: Maximum number of iterations (default is 100).
   :type max_iter: int, optional

   :returns: Estimated IRR as a decimal.
   :rtype: float

   :raises ValueError: If the IRR calculation does not converge.

   .. rubric:: Examples

   >>> from datetime import datetime
   >>> cash_flows = [-1000, 300, 400, 500, 600]
   >>> dates = [datetime(2020, 1, 1), datetime(2020, 6, 1), datetime(2021, 1, 1),
   ...          datetime(2021, 6, 1), datetime(2022, 1, 1)]
   >>> xirr(cash_flows, dates)
   0.5831820341312749  # Example output


.. py:function:: xirr(cash_flows, dates=None, guess: float = 0.1, tol: float = 1e-06, max_iter: int = 100) -> float

   Calculate the IRR (Yield) for non-periodic cash flows (XIRR).

   Flexible wrapper for xirr that accepts dict, pandas Series, or separate lists for cash flows
   and dates. This function computes the IRR for a series of cash flows that occur
   at irregular intervals.

   It uses the Newton-Raphson method to find the rate that makes the NPV
   of the cash flows equal to zero.

   The formula is:

   .. math::
       0 = \sum_{i=0}^{n} \frac{CF_i}{(1 + IRR)^{\frac{d_i - d_0}{365}}}
   where:
       - :math:`IRR` is the internal rate of return
       - :math:`CF_i` is the cash flow at time `i`
       - :math:`d_i` is the date of cash flow `i`
       - :math:`d_0` is the date of the first cash flow
       - :math:`n` is the total number of cash flows

   This function adjusts the cash flows based on the number of days between each cash flow
   and the first cash flow date.
   If `cash_flows` is a dictionary, keys must be dates (datetime or string
   convertible to datetime), and values are cash flows.
   If `cash_flows` is a pandas Series, the index must be dates.
   If `cash_flows` is a list/sequence, `dates` must be provided as a sequence of
   datetime or string.
   If `dates` is not provided, it assumes `cash_flows` is a dictionary or Series
   with dates as keys/index.
   This function handles NaNs and works with NumPy arrays and pandas Series/DataFrames.

   :param cash_flows: If dict or Series, keys/index must be dates (datetime or string convertible to datetime),
                      values are cash flows.
                      If list/sequence, must provide `dates` as a sequence of datetime or string.
   :type cash_flows: dict, pandas.Series, or list/sequence of floats
   :param dates: Dates corresponding to cash flows if cash_flows is a sequence.
   :type dates: sequence of datetime or string, optional
   :param guess:
   :type guess: see xirr
   :param tol:
   :type tol: see xirr
   :param max_iter:
   :type max_iter: see xirr

   :returns: Estimated IRR as a decimal.
   :rtype: float

   .. rubric:: Examples

   >>> import pandas as pd
   >>> cf = pd.Series([-1000, 300, 400, 500, 600],
   ...                index=pd.to_datetime(["2020-01-01", "2020-06-01", "2021-01-01",
   ...                                      "2021-06-01", "2022-01-01"]))
   >>> xirr(cf)
   0.5831820341312749  # Example output


