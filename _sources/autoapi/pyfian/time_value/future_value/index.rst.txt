pyfian.time_value.future_value
==============================

.. py:module:: pyfian.time_value.future_value


Functions
---------

.. autoapisummary::

   pyfian.time_value.future_value.future_value_annuity
   pyfian.time_value.future_value.future_value_annuity_annual
   pyfian.time_value.future_value.future_value_growing_annuity


Module Contents
---------------

.. py:function:: future_value_annuity(payment: float, rate: float, periods: int) -> float

   Calculate the present value of a fixed annuity.

   The present value of a fixed annuity is given by:

   .. math::
       PV = P \times \frac{1 - (1 + r)^{-n}}{r}

   where:
       - :math:`PV` is the present value
       - :math:`P` is the payment per period
       - :math:`r` is the interest rate per period
       - :math:`n` is the total number of periods

   :param payment: The fixed payment amount per period.
   :type payment: float
   :param rate: The interest rate per period (as a decimal).
   :type rate: float
   :param periods: The total number of periods.
   :type periods: int

   :returns: Present value of the fixed annuity.
   :rtype: float

   .. rubric:: Examples

   >>> present_value_annuity(100, 0.05, 10)
   772.1734929184818


.. py:function:: future_value_annuity_annual(payment: float, annual_rate: float, years: int, payments_per_year: int) -> float

   Calculate the present value of a fixed annuity with an annual interest rate
   and a specified number of payments per year.

   The present value is calculated as:

   .. math::
       PV = P \times \frac{1 - (1 + r)^{-N}}{r}

   where:
       - :math:`P` is the payment per period
       - :math:`r` is the periodic interest rate (annual_rate / payments_per_year)
       - :math:`N` is the total number of periods,
       with :math:`N = \text{years} \times \text{payments_per_year}`

   This function adjusts the interest rate and number of periods
   for non-annual payment frequencies.

   :param payment: The fixed payment amount per period.
   :type payment: float
   :param annual_rate: The annual interest rate (as a decimal).
   :type annual_rate: float
   :param years: The total number of years.
   :type years: int
   :param payments_per_year: The number of payments per year.
   :type payments_per_year: int

   :returns: Present value of the fixed annuity.
   :rtype: float

   .. rubric:: Examples

   >>> present_value_annuity_annual(100, 0.05, 10, 12)
   9428.135032823473


.. py:function:: future_value_growing_annuity(payment: float, rate: float, periods: int, growth: float = 0.0) -> float

   Calculate the present value of a growing annuity.

   The present value is calculated as:

   .. math::
       PV = P \times \frac{1 - \left(\frac{1 + r}{1 + g}\right)^{-n}}
       {\left(\frac{1 + r}{1 + g}\right) - 1}

   where:
       - :math:`P` is the payment at time t=0
       - :math:`r` is the interest rate per period
       - :math:`g` is the growth rate per period
       - :math:`n` is the total number of periods

   .. note::

      The `payment` parameter corresponds to the payment at time t=0.
      Growth is applied in the first period as well, so the payment at time t=k is:
          payment * (1 + growth)^(k+1)
      for each period k.

   :param payment: The initial payment amount per period.
   :type payment: float
   :param rate: The interest rate per period (as a decimal).
   :type rate: float
   :param periods: The total number of periods.
   :type periods: int
   :param growth: The growth rate of the payments (as a decimal). Defaults to 0.0.
   :type growth: float, optional

   :returns: Present value of the growing annuity.
   :rtype: float

   .. rubric:: Examples

   >>> present_value_growing_annuity(100, 0.05, 10, 0.02 )
   855.5867765481578
   >>> present_value_growing_annuity(100, 0.05, 10, 0.05)
   1000.0


