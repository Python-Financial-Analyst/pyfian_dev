pyfian.time_value.future_value
==============================

.. py:module:: pyfian.time_value.future_value


Functions
---------

.. autoapisummary::

   pyfian.time_value.future_value.future_value_annuity
   pyfian.time_value.future_value.future_value_annuity_annual
   pyfian.time_value.future_value.future_value_growing_annuity


Module Contents
---------------

.. py:function:: future_value_annuity(payment: float, rate: float, periods: int) -> float

   Calculate the future value of a fixed annuity.

   The future value of a fixed annuity is given by:

   .. math::
       FV = P \times (1 + r)^{N} \times \frac{1 - \frac{1}{(1 + r)^{N}}}{r}

   where:
       - :math:`FV` is the future value
       - :math:`P` is the payment per period
       - :math:`r` is the interest rate per period
       - :math:`N` is the total number of periods

   :param payment: The fixed payment amount per period.
   :type payment: float
   :param rate: The interest rate per period (as a decimal).
   :type rate: float
   :param periods: The total number of periods.
   :type periods: int

   :returns: Future value of the fixed annuity.
   :rtype: float

   .. rubric:: Examples

   >>> future_value_annuity(100, 0.05, 10)
   1257.7892535549


.. py:function:: future_value_annuity_annual(payment: float, annual_rate: float, years: int, payments_per_year: int) -> float

   Calculate the future value of a fixed annuity with an annual interest rate
   and a specified number of payments per year.

   The future value is calculated as:

   .. math::
       FV = P \times (1 + r)^{N} \times \frac{1 - \frac{1}{(1 + r)^{N}}}{r}

   where:
       - :math:`FV` is the future value
       - :math:`P` is the payment per period
       - :math:`r` is the periodic interest rate (annual_rate / payments_per_year)
       - :math:`N` is the total number of periods,
       with :math:`N = \text{years} \times \text{payments_per_year}`

   This function adjusts the interest rate and number of periods
   for non-annual payment frequencies.

   :param payment: The fixed payment amount per period.
   :type payment: float
   :param annual_rate: The annual interest rate (as a decimal).
   :type annual_rate: float
   :param years: The total number of years.
   :type years: int
   :param payments_per_year: The number of payments per year.
   :type payments_per_year: int

   :returns: Future value of the fixed annuity.
   :rtype: float

   .. rubric:: Examples

   >>> future_value_annuity_annual(100, 0.05, 10, 12)
   15528.2279445667


.. py:function:: future_value_growing_annuity(payment: float, rate: float, periods: int, growth: float = 0.0) -> float

   Calculate the future value of a growing annuity.

   The future value of a growing annuity accounts for payments that grow at a constant rate over time for a specified number of periods.

   The future value is calculated as:

   .. math::
       FV = P \times \frac{(1 + r)^{N} - (1 + g)^{N}}{r - g}

   where:
       - :math:`FV` is the future value
       - :math:`P` is the payment at time t=0
       - :math:`r` is the interest rate per period
       - :math:`g` is the growth rate per period
       - :math:`N` is the total number of periods

   This formula accounts for the growth of payments over time,
   where each payment grows by the growth rate in each period.

   .. note::

      The `payment` parameter corresponds to the payment at time t=0.
      Growth is applied in the first period as well, so the payment at time t=k is:
          :math:`P * (1 + g)^{(k+1)}`
      for each period k.

   :param payment: The initial payment amount per period.
   :type payment: float
   :param rate: The interest rate per period (as a decimal).
   :type rate: float
   :param periods: The total number of periods.
   :type periods: int
   :param growth: The growth rate of the payments (as a decimal). Defaults to 0.0.
   :type growth: float, optional

   :returns: Future value of the growing annuity.
   :rtype: float

   .. rubric:: Examples

   >>> future_value_growing_annuity(100, 0.05, 10, 0.02)
   1393.6607030611262
   >>> future_value_growing_annuity(100, 0.05, 10, 0.05)
   1628.894626777442


