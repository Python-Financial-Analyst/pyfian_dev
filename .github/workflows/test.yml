# This workflow will install Python dependencies, run tests and lint.
# For more information see: https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-python

name: Test Python application

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

permissions:
  contents: read

jobs:
  test:
    strategy:
      matrix:
        # Test all supported Python versions under Ubuntu
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12', '3.13']

    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'
    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry config virtualenvs.in-project true
    - name: Install dependencies with Poetry
      run: |
        poetry install
    - name: Cache Poetry virtualenvs
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ runner.os }}-${{ matrix.python-version }}-
    - name: Lint with ruff
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run ruff check --select=E9,F63,F7,F82
        # exit-zero treats all errors as warnings
        poetry run ruff check --exit-zero --statistics
    - name: Run tests
      run: |
        poetry run pytest

  test-doc:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Install dependencies with Poetry
        run: poetry install
      - name: Build Sphinx docs
        run: poetry run sphinx-build docs docs/_build

  deploy-build:
    needs: [test, test-doc]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Install dependencies with Poetry
        run: poetry install
      - name: Build package
        run: poetry build
      - name: Build Sphinx docs
        run: poetry run sphinx-build docs docs/_build
      - name: Upload built docs
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/_build
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          repository_url: https://test.pypi.org/legacy/
          password: ${{ secrets.TESTPYPI_API_TOKEN }}

  deploy-docs:
    needs: deploy-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download built docs
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: docs/_build
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build
