# -*- coding: utf-8 -*-
"""PFA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KUltLuLhANEgTpbZQZbmSY1BMsjDnlTX
"""

import pandas as pd
import matplotlib.pyplot as plt

data = {'Year': [2020, 2021, 2022, 2023],
        'Nominal Interest Rate': [1.5, 2.0, 3.0, 4.0],
        'Inflation Rate': [1.0, 5.0, 6.0, 4.0]}

df = pd.DataFrame(data)

df['Real Interest Rate'] = df['Nominal Interest Rate'] - df['Inflation Rate']

print(df)

plt.figure(figsize=(10, 6))
plt.plot(df['Year'], df['Nominal Interest Rate'], marker='o', label='Nominal Interest Rate (%)')
plt.plot(df['Year'], df['Inflation Rate'], marker='o', label='Inflation Rate (%)')
plt.plot(df['Year'], df['Real Interest Rate'], marker='o', label='Real Interest Rate (%)')

plt.title('Nominal vs. Real Interest Rates and Inflation')
plt.xlabel('Year')
plt.ylabel('Rate (%)')
plt.grid(True)
plt.legend()
plt.show()

import math

def geometric_return(returns):

  if isinstance(returns, pd.Series):
      returns = returns.tolist()

  if not returns:
    return 0.0

  product = 1
  for r in returns:
    product *= (1 + r)

  geometric_mean = (product ** (1/len(returns))) - 1
  return geometric_mean

nominal_returns_decimal = df['Nominal Interest Rate'] / 100

geo_return_nominal = geometric_return(nominal_returns_decimal)

print(f"\nGeometric return of Nominal Interest Rates: {geo_return_nominal:.4f}")

real_returns_decimal = df['Real Interest Rate'] / 100
geo_return_real = geometric_return(real_returns_decimal)
print(f"Geometric return of Real Interest Rates: {geo_return_real:.4f}")

def harmonic_mean(numbers):
    if not numbers:
        return 0.0
    return len(numbers) / sum(1 / x for x in numbers if x != 0)

nominal_rates = df['Nominal Interest Rate'].tolist()
harmonic_mean_nominal = harmonic_mean(nominal_rates)
print(f"\nHarmonic mean of Nominal Interest Rates: {harmonic_mean_nominal:.4f}")

real_rates = df['Real Interest Rate'].tolist()
harmonic_mean_real = harmonic_mean(real_rates)
print(f"Harmonic mean of Real Interest Rates: {harmonic_mean_real:.4f}")

import numpy_financial as npf

cash_flows = [-1000, 300, 400, 500]

try:
    irr = npf.irr(cash_flows)
    print(f"\nThe Internal Rate of Return (IRR) is: {irr:.4f}")
except ValueError as e:
    print(f"\nCould not calculate IRR: {e}")
    print("Ensure there is at least one positive and one negative cash flow.")

initial_investment = 1000
continuous_rate = 0.05
time_in_years = 3

future_value = initial_investment * math.exp(continuous_rate * time_in_years)

print(f"\nInitial Investment: ${initial_investment}")
print(f"Continuous Annual Rate: {continuous_rate * 100}%")
print(f"Time Period: {time_in_years} years")
print(f"Future Value with Continuous Compounding: ${future_value:.2f}")

continuously_compounded_return_over_period = math.log(future_value / initial_investment)
print(f"Continuously Compounded Return over the period: {continuously_compounded_return_over_period:.4f}")

annual_continuously_compounded_return = continuously_compounded_return_over_period / time_in_years
print(f"Annual Continuously Compounded Return: {annual_continuously_compounded_return:.4f}")