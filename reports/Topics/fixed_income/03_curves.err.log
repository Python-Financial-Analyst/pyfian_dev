Traceback (most recent call last):
  File "/home/runner/.cache/pypoetry/virtualenvs/pyfian-xVEnJtcL-py3.12/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/.cache/pypoetry/virtualenvs/pyfian-xVEnJtcL-py3.12/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/.cache/pypoetry/virtualenvs/pyfian-xVEnJtcL-py3.12/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/.cache/pypoetry/virtualenvs/pyfian-xVEnJtcL-py3.12/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/.cache/pypoetry/virtualenvs/pyfian-xVEnJtcL-py3.12/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/.cache/pypoetry/virtualenvs/pyfian-xVEnJtcL-py3.12/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/.cache/pypoetry/virtualenvs/pyfian-xVEnJtcL-py3.12/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import matplotlib.pyplot as plt
from pyfian.yield_curves.spot_curve import SpotCurve
from pyfian.fixed_income.fixed_rate_bond import FixedRateBullet

# Define multiple bonds with different maturities
bonds = [
    FixedRateBullet(
        issue_dt="2020-01-01",
        maturity=maturity,
        cpn=5.0,
        cpn_freq=1,
        notional=1000,
        yield_to_maturity=5.0,
        settlement_date="2021-01-01",
        price=1000,  # Explicit price to ensure negative cash flow
    )
    for maturity in ["2025-01-01", "2030-01-01", "2035-01-01", "2040-01-01"]
]

# Create SpotCurve with the settlement date of the first bond
flat_curve = SpotCurve(curve_date=bonds[0].get_settlement_date(), bonds=bonds)

# Plot the discount factor curve
flat_curve.plot_curve(
    t_max=30, n=100, kind="discount", label="Discount Factor (5%)", color="red"
)

plt.legend()
plt.show()
------------------


[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 7[39m
[32m      3[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mpyfian[39;00m[34;01m.[39;00m[34;01mfixed_income[39;00m[34;01m.[39;00m[34;01mfixed_rate_bond[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m FixedRateBullet
[32m      5[39m [38;5;66;03m# Define multiple bonds with different maturities[39;00m
[32m      6[39m bonds = [
[32m----> [39m[32m7[39m     [43mFixedRateBullet[49m[43m([49m
[32m      8[39m [43m        [49m[43missue_dt[49m[43m=[49m[33;43m"[39;49m[33;43m2020-01-01[39;49m[33;43m"[39;49m[43m,[49m
[32m      9[39m [43m        [49m[43mmaturity[49m[43m=[49m[43mmaturity[49m[43m,[49m
[32m     10[39m [43m        [49m[43mcpn[49m[43m=[49m[32;43m5.0[39;49m[43m,[49m
[32m     11[39m [43m        [49m[43mcpn_freq[49m[43m=[49m[32;43m1[39;49m[43m,[49m
[32m     12[39m [43m        [49m[43mnotional[49m[43m=[49m[32;43m1000[39;49m[43m,[49m
[32m     13[39m [43m        [49m[43myield_to_maturity[49m[43m=[49m[32;43m5.0[39;49m[43m,[49m
[32m     14[39m [43m        [49m[43msettlement_date[49m[43m=[49m[33;43m"[39;49m[33;43m2021-01-01[39;49m[33;43m"[39;49m[43m,[49m
[32m     15[39m [43m        [49m[43mprice[49m[43m=[49m[32;43m1000[39;49m[43m,[49m[43m  [49m[38;5;66;43;03m# Explicit price to ensure negative cash flow[39;49;00m
[32m     16[39m [43m    [49m[43m)[49m
[32m     17[39m     [38;5;28;01mfor[39;00m maturity [38;5;129;01min[39;00m [[33m"[39m[33m2025-01-01[39m[33m"[39m, [33m"[39m[33m2030-01-01[39m[33m"[39m, [33m"[39m[33m2035-01-01[39m[33m"[39m, [33m"[39m[33m2040-01-01[39m[33m"[39m]
[32m     18[39m ]
[32m     20[39m [38;5;66;03m# Create SpotCurve with the settlement date of the first bond[39;00m
[32m     21[39m flat_curve = SpotCurve(curve_date=bonds[[32m0[39m].get_settlement_date(), bonds=bonds)

[36mFile [39m[32m~/work/pyfian_dev/pyfian_dev/src/pyfian/fixed_income/fixed_rate_bond.py:245[39m, in [36mFixedRateBullet.__init__[39m[34m(self, issue_dt, maturity, cpn, cpn_freq, notional, settlement_convention_t_plus, record_date_t_minus, settlement_date, yield_to_maturity, price, adjust_to_business_days, day_count_convention, following_coupons_day_count, yield_calculation_convention)[39m
[32m    239[39m     [38;5;28;01mif[39;00m yield_to_maturity [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m    240[39m         [38;5;66;03m# Check if self._price is approximately equal to the price, else raise ValueError[39;00m
[32m    241[39m         [38;5;28;01mif[39;00m (
[32m    242[39m             [38;5;28mgetattr[39m([38;5;28mself[39m, [33m"[39m[33m_price[39m[33m"[39m, [38;5;28;01mNone[39;00m) [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[32m    243[39m             [38;5;129;01mand[39;00m [38;5;28mabs[39m([38;5;28mself[39m._price - price) / [38;5;28mself[39m._price > [32m1e-5[39m
[32m    244[39m         ):
[32m--> [39m[32m245[39m             [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[32m    246[39m                 [33m"[39m[33mBond price calculated by yield to maturity does not match the current bond price.[39m[33m"[39m
[32m    247[39m                 [33mf[39m[33m"[39m[33m (calculated: [39m[38;5;132;01m{[39;00m[38;5;28mself[39m._price[38;5;132;01m}[39;00m[33m, given: [39m[38;5;132;01m{[39;00mprice[38;5;132;01m}[39;00m[33m)[39m[33m"[39m
[32m    248[39m             )
[32m    249[39m     [38;5;28mself[39m.set_price(
[32m    250[39m         price,
[32m    251[39m         settlement_date,
[32m   (...)[39m[32m    254[39m         yield_calculation_convention=yield_calculation_convention,
[32m    255[39m     )
[32m    256[39m [38;5;28;01melif[39;00m yield_to_maturity [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m    257[39m     [38;5;66;03m# If neither yield_to_maturity nor price is set, set bond price to None[39;00m

[31mValueError[39m: Bond price calculated by yield to maturity does not match the current bond price. (calculated: 4.488654508629179, given: 1000)

